// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  MANAGER
}

model User {
 id String @id @default(uuid())
 name String
 email String @unique
 passwordHash String
 phone String 
 role Role @default(CUSTOMER)
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

 Restaurant Restaurant[]

 Order Order[]

 Evaluation Evaluation[]
}

model Restaurant {
  id String @id @default(uuid())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [managerId], references: [id], onDelete: Cascade)
  managerId String

  Product Product[]

  Order Order[]

  Evaluation Evaluation[]
}

model Product {
  id String @id @default(uuid())
  name String
  description String
  priceInCents Int
  restaurantId String 
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrderItem OrderItem[]
}

enum Status {
  PENDING
  CANCELED
  PROCESSING
  DELIVERING
  DELIVERED
}

model Order {
  id String @id @default(uuid())
  status Status
  totalInCents Int
  createdAt DateTime @default(now())
  
  restaurantId String 
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user User @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  

  OrderItem OrderItem[]
}

model OrderItem {
  id String @id @default(uuid())
  orderId String 
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String 
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Evaluation {
  id String @id @default(uuid())
  user User @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  restaurantId String 
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  rate Int
  comment String
  createdAt DateTime @default(now())
}

